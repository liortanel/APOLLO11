@{
    ViewData["Title"] = "Marte";
}
<style>
#introScreen {
    position: fixed;
    top: 0; left: 0; width: 100vw; height: 100vh;
    background: rgba(0,0,0,1);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color:white;
    z-index: 200;
}
button {
    color: #ffffff;
    background-color: #222;
    border: 2px solid #00ffff;
    padding: 12px 24px;
    margin-top: 20px;
    cursor: pointer;
    text-align: center;
    border-radius: 8px;
    transition: background 0.3s, transform 0.2s;
}
button:hover {
    background-color: #00ffff;
    color: #000;
    transform: scale(1.05);
}
#videoContainer {
    margin-top: 30px;
    width: 320px;
    height: 240px;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 0 20px #ff6f61aa;
}
#status {
    font-size: 1.2rem;
    margin-top: 1rem;
    color: #ffa07a;
    font-weight: bold;
}
#successMsg {
    margin-top: 2rem;
    font-size: 1.6rem;
    color: #7fff7f;
    text-shadow: 0 0 10px #7fff7f;
    font-weight: 700;
}
</style>

<div id="introScreen">
    <h1 id="introTitle">Marte</h1>
    <p id="introDesc">Tus ojos revelan secretos. Parpadeá tres veces rápido para avanzar.</p>
    <button id="btnStart">Aceptar</button>
</div>

<div style="display: flex; flex-direction: column; align-items: center;">
    <div id="videoContainer">
        <video id="video" autoplay muted playsinline></video>
    </div>
    <div id="status">Esperando inicio...</div>
    <div id="successMsg" style="display:none;">¡Patrón detectado! La puerta se abre...</div>
</div>

<!-- Librerías -->
@Html.Raw(@"
<script src='https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@4.12.0/dist/tf.min.js'></script>
<script src='https://cdn.jsdelivr.net/npm/@tensorflow-models/face-landmarks-detection'></script>
<script src='https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh'></script>
")

<script>
const btnStart = document.getElementById("btnStart");
const introScreen = document.getElementById("introScreen");
const video = document.getElementById("video");
const status = document.getElementById("status");
const successMsg = document.getElementById("successMsg");

let model, blinkCounter = 0;
let blinkTimes = [];
let detecting = false;

btnStart.addEventListener("click", () => {
    introScreen.style.display = "none";
    startCameraAndDetection();
});

function eyeAspectRatio(upper, lower) {
    return Math.abs(upper[1] - lower[1]);
}

async function startCameraAndDetection() {
    try {
        status.textContent = "Cargando modelo...";
        model = await faceLandmarksDetection.load(
            faceLandmarksDetection.SupportedPackages.mediapipeFacemesh
        );

        const stream = await navigator.mediaDevices.getUserMedia({ video: { width: 320, height: 240 } });
        video.srcObject = stream;
        await video.play();

        detecting = true;
        status.textContent = "Detectando rostro...";

        setInterval(async () => {
            if (!detecting) return;

            const predictions = await model.estimateFaces({ input: video });

            if (predictions.length > 0) {
                const keypoints = predictions[0].scaledMesh;
                const upper = keypoints[159];
                const lower = keypoints[145];
                const ear = eyeAspectRatio(upper, lower);

                if (ear < 5) {
                    if (!window.eyeClosed) {
                        window.eyeClosed = true;
                        blinkCounter++;
                        blinkTimes.push(Date.now());
                        status.textContent = `Parpadeos: ${blinkCounter}`;
                        checkPattern();
                    }
                } else {
                    window.eyeClosed = false;
                }
            } else {
                status.textContent = "No se detectó rostro.";
            }
        }, 150);
    } catch (error) {
        console.error("Error:", error);
        status.textContent = "Error cargando cámara o modelo.";
    }
}

function checkPattern() {
    const lastThree = blinkTimes.slice(-3);
    if (lastThree.length === 3 && (lastThree[2] - lastThree[0] <= 5000)) {
        detecting = false;
        status.style.display = "none";
        successMsg.style.display = "block";
        stopCamera();
    }
}

function stopCamera() {
    const stream = video.srcObject;
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
        video.srcObject = null;
    }
}
</script>
