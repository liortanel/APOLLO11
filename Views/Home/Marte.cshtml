@{
    ViewData["Title"] = "Marte";
}
<style>
*{
    background-color: black;
    font-family: 'Courier New', monospace;
}
  #introScreen {
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,1);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      color:white;
      z-index: 200;
  }
  button {
      color: #ffffff;
      background-color: #222;
      border: 2px solid #00ffff;
      padding: 12px 24px;
      margin: 30px auto 0;
      width: fit-content;
      cursor: pointer;
      text-align: center;
      text-shadow: 0 0 5px #00ffff;
      border-radius: 8px;
      transition: background 0.3s, transform 0.2s;
      animation: fadeIn 3s ease-out forwards;
  }
  button:hover {
      background-color: #00ffff;
      color: #000;
      transform: scale(1.05);
  }
  #introScreen h1 {
      font-size: 3rem;
      margin-bottom: 20px;
  }
  #introScreen p {
      font-size: 1.5rem;
      margin-bottom: 40px;
  }
  #videoContainer {
      margin-top: 2%;
      margin-left: 20.5%;
      width: 30%;
      height: auto;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 0 20px #00ffff;
      float: left;
  }
  video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transform: scaleX(-1); /* Invertir horizontalmente el video */
  }
  #status {
      clear: both;
      padding-top: 20px;
      font-size: 1.2rem;
      color: #00ffff;
      font-weight: bold;
      font-family: 'Courier New', monospace;
      text-align: center;
      text-shadow: 0 0 10px #00ffff;
  }
  #successMsg {
      margin-top: 2rem;
      font-size: 1.6rem;
      color: #00ffff;
      text-shadow: 0 0 10px #00ffff;
      font-weight: 700;
      font-family: 'Courier New', monospace;
      clear: both;
      text-align: center;
  }
  #alien {
      width: 22.9%;
      height: auto;
      margin-top: 2%;
      margin-left: 5%;
      float: left;
      transition: all 0.3s ease;
  }
  #alien:hover {
      transform: scale(1.1);
      filter: drop-shadow(0 0 20px #00ffff);
  }
</style>

<div id="introScreen">
    <h1 id="introTitle">Marte</h1>
    <p id="introDesc">Tus ojos revelan secretos. Parpade√° tres veces r√°pido para avanzar.</p>
    <button id="btnStart">Aceptar</button>
</div>

<div id="videoContainer" style="display:none;">
    <video id="video" autoplay muted playsinline></video>
</div>
<img src="/img/alien.png" alt="alien" id="alien">
<div id="status"></div>
<div id="successMsg" style="display:none;">¬°Patr√≥n detectado! La puerta se abre...</div>


<!-- ‚úÖ Carga de scripts desde CDN -->
@Html.Raw(@"
<script src='https://cdn.jsdelivr.net/npm/@mediapipe/hands@0.4.1646424915'></script>
<script src='https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils@0.3.1640029074'></script>
<script src='https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils@0.3.1620248257'></script>
")

<script>
    let model;
    let detecting = false;
    let video = null;
    let statusText = null;
    let successMsg = null;
    let videoContainer = null;
    let btnStart = null;
    let handsDetectedTime = null;
    let hands;
    let camera;

    function updateStatus(message, isError = false) {
        console.log(message);
        if (statusText) {
            statusText.innerHTML = message;
            if (isError) {
                statusText.style.color = '#00ffff';
            } else {
                statusText.style.color = '#00ffff';
            }
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM cargado, inicializando elementos...");
        video = document.getElementById('video');
        statusText = document.getElementById('status');
        successMsg = document.getElementById('successMsg');
        videoContainer = document.getElementById('videoContainer');
        btnStart = document.getElementById('btnStart');

        if (!btnStart) {
            console.error("No se encontr√≥ el bot√≥n de inicio");
            return;
        }

        btnStart.addEventListener('click', async () => {
            console.log("Bot√≥n clickeado");
            try {
                updateStatus("Iniciando...");
                document.getElementById('introScreen').style.display = 'none';
                videoContainer.style.display = 'block';
                await iniciarDeteccion();
            } catch (error) {
                console.error("Error al iniciar:", error);
                updateStatus("Error: " + error.message, true);
            }
        });
    });

    async function setupCamera() {
        updateStatus("Inicializando c√°mara...");
        try {
            hands = new Hands({
                locateFile: (file) => {return @Html.Raw(@"`https://cdn.jsdelivr.net/npm/@mediapipe/hands@0.4.1646424915/${file}`");
                }
            });

            hands.setOptions({
                maxNumHands: 2,
                modelComplexity: 1,
                minDetectionConfidence: 0.5,
                minTrackingConfidence: 0.5
            });

            hands.onResults(onResults);

            camera = new Camera(video, {
                onFrame: async () => {
                    await hands.send({image: video});
                },
                width: 640,
                height: 480
            });

            await camera.start();
            updateStatus("C√°mara inicializada");
        } catch (error) {
            updateStatus("Error accediendo a la c√°mara: " + error.message, true);
            throw error;
        }
    }

    async function iniciarDeteccion() {
        try {
            updateStatus("Inicializando sistema de detecci√≥n...");
            await setupCamera();
            updateStatus("Sistema listo. Muestra tus dos manos...");
            detecting = true;
        } catch (e) {
            console.error("Error durante la inicializaci√≥n:", e);
            updateStatus("Error: " + e.message, true);
        }
    }

    function onResults(results) {
        if (!detecting) return;

        try {
            const numHands = results.multiHandLandmarks.length;
            
            // Debug info
            let debugInfo = "";
            results.multiHandedness.forEach((hand, index) => {
                debugInfo += `Mano ${index + 1}: ${(hand.score * 100).toFixed(0)}% confianza (${hand.label})<br>`;
            });

            if (numHands === 2) {
                if (!handsDetectedTime) {
                    handsDetectedTime = Date.now();
                    updateStatus("¬°Dos manos detectadas! Mant√©n la posici√≥n...");
                } else {
                    const timeElapsed = Date.now() - handsDetectedTime;
                    if (timeElapsed >= 2000) {
                        detecting = false;
                        statusText.style.display = 'none';
                        successMsg.style.display = 'block';
                        successMsg.innerHTML = "‚ú® ¬°Manos detectadas! üö™ La puerta se abre... ‚ú®";
                        camera.stop();
                        return;
                    }
                    const remainingTime = ((2000 - timeElapsed) / 1000).toFixed(1);
                    statusText.innerHTML = `
                        ¬°Dos manos detectadas!<br>
                        Mant√©n ${remainingTime} segundos m√°s...<br>
                        ${debugInfo}
                        ${'üñêÔ∏è'.repeat(numHands)} (${numHands}/2)
                    `;
                }
            } else {
                handsDetectedTime = null;
                statusText.innerHTML = `
                    Manos detectadas: ${numHands}/2<br>
                    ${debugInfo}
                    ${'üñêÔ∏è'.repeat(numHands)}
                    <br>Muestra ambas manos frente a la c√°mara
                `;
            }
        } catch (error) {
            console.error("Error en detecci√≥n:", error);
            updateStatus("Detectando...");
        }
    }
</script>
