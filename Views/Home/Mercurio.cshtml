@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    var tokens = Antiforgery.GetAndStoreTokens(Context);
}
@{
    ViewData["Title"] = "Mercurio";
}
<input type="hidden" name="__RequestVerificationToken" value="@tokens.RequestToken" />

<style>
  html, body {
    margin: 0; padding: 0; height: 100%; width: 100%;
    overflow: hidden;
    font-family: monospace;
    background: radial-gradient(ellipse at center, #220000 0%, #110000 90%);
    color: white;
    display: flex; 
    flex-direction: column; 
    align-items: center;
    justify-content: center;
  }

  #introScreen {
    position: fixed;
    top: 0; left: 0; width: 100vw; height: 100vh;
    background: rgba(0,0,0,1);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    z-index: 200;
  }

  #introScreen h1 {
    font-size: 3rem;
    margin-bottom: 20px;
  }

  #introScreen p {
    font-size: 1.5rem;
    margin-bottom: 40px;
  }

  .boton-jugar {
    font-size: 24px;
    color: #ffffff;
    background-color: #222;
    border: 2px solid #00ffff;
    padding: 12px 24px;
    cursor: pointer;
    text-align: center;
    text-shadow: 0 0 5px #00ffff;
    border-radius: 8px;
    transition: background 0.3s, transform 0.2s;
    animation: fadeIn 3s ease-out forwards;
    text-decoration: none;
    margin-top: 20px;
  }

  .boton-jugar:hover {
    background-color: #00ffff;
    color: #000;
    transform: scale(1.05);
  }

  .botonMapa {
    position: absolute;
    font-size: 16px;
    color: #ffffff;
    background-color: #222;
    border: 2px solid #00ffff;
    padding: 8px 16px;
    cursor: pointer;
    text-align: center;
    text-shadow: 0 0 5px #00ffff;
    border-radius: 8px;
    transition: background 0.3s;
    animation: fadeIn 3s ease-out forwards;
    text-decoration: none;
    display: inline-block;
    user-select: none;
    transform: translate(-50%, -50%);
    top: 5%;
    left: 3%;
    z-index: 1000;
  }

  .botonMapa:hover {
    background-color: #00ffff;
    color: #000;
  }

  #gameContainer {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 30px;
    padding: 20px;
    position: relative;
    height: 65vh;
  }

  #gameInfo {
    color: #00ffff;
    text-shadow: 0 0 5px #00ffff;
    font-size: 18px;
    background: rgba(0, 0, 0, 0.7);
    padding: 20px;
    border-radius: 10px;
    border: 1px solid #00ffff;
    box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);
    position: fixed;
    right: 80px;
    top: 50%;
    transform: translateY(-50%);
    width: 400px;
    z-index: 100;
  }

    #pistasBtn {
    position: fixed;
    top: 100px;
    right: 25px;
    background: rgba(30, 30, 30, 0.85);
    border: 2px solid #00ffff;
    color: #00ffff;
    font-size: 16px;
    padding: 10px 16px;
    border-radius: 8px;
    cursor: pointer;
    font-family: 'Courier New', monospace;
    z-index: 1000;
    transition: background-color 0.3s, color 0.3s;
    display: none; /* Oculto hasta iniciar */
  }
  #pistasBtn:hover {
    background: #00ffff;
    color: black;
  }

  #gameInfo h3 {
    color: #ff6600;
    text-shadow: 0 0 5px #ff6600;
    margin-top: 0;
    margin-bottom: 15px;
    text-align: center;
  }

  #gameInfo ul {
    list-style-type: none;
    padding-left: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  #gameInfo li {
    padding-left: 20px;
    position: relative;
  }

  #gameInfo li:before {
    content: "‚Ä¢";
    position: absolute;
    left: 0;
    color: #ff6600;
  }

  #indicators {
    position: fixed;
    top: 60px;
    right: 20px;
    text-align: right;
  }

  #roundIndicator, #progressIndicator {
    font-size: 24px;
    color: #00ffff;
    text-shadow: 0 0 8px #00ffff;
    margin-bottom: 10px;
    margin-top: 10px;
  }
  #indicators{
    margin-top: 5%;
  }

  .pyramid-container {
    display: none;
    flex-direction: column;
    align-items: center;
    gap: 30px;
    transform: scale(1.3);
    margin: 50px 0;
  }

  .pyramid-container.active {
    display: flex;
  }

  .pyramid-row {
    display: flex;
    justify-content: center;
    gap: 20px;
  }

  .cell {
    width: 80px;
    height: 80px;
    border: 3px solid #ff6600;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    cursor: pointer;
    background: rgba(255, 51, 0, 0.2);
    transition: all 0.3s ease;
    position: relative;
  }

  .cell:hover {
    transform: scale(1.1);
    box-shadow: 0 0 15px #ff6600;
  }

  .cell.selected {
    background: rgba(0, 255, 0, 0.3);
    border-color: #00ff00;
    box-shadow: 0 0 20px #00ff00;
  }

  .cell .letter {
    position: absolute;
    top: 2px;
    left: 33px;
    font-size: 20px;
    color: #00ffff;
    text-shadow: 0 0 5px #00ffff;
  }

  .cell.success {
    background: rgba(0, 255, 0, 0.3);
    border-color: #00ff00;
    box-shadow: 0 0 20px #00ff00;
    pointer-events: none;
  }

  .cell.used {
    opacity: 0.5;
    pointer-events: none;
  }

  #foundSequences {
    position: fixed;
    left: 150px;
    top: 45%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.7);
    padding: 20px;
    border-radius: 10px;
    border: 1px solid #00ffff;
    box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);
    color: #00ffff;
    min-width: 200px;
  }

  #foundSequences h3 {
    color: #ff6600;
    text-shadow: 0 0 5px #ff6600;
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 20px;
    text-align: center;
  }

  .sequence-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .sequence-list li {
    margin-bottom: 10px;
    padding: 5px 10px;
    border: 1px solid #00ffff;
    border-radius: 5px;
    text-align: center;
    text-shadow: 0 0 5px #00ffff;
  }

  #objective {
    font-size: 20px;
    color: #ff6600;
    text-shadow: 0 0 15px #ff6600;
    margin-bottom: 0;
    text-align: center;
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.7);
    padding: 15px 40px;
    border-radius: 20px;
    border: 2px solid #ff6600;
    box-shadow: 0 0 20px rgba(255, 102, 0, 0.3);
    z-index: 100;
  }

  #objective span {
    font-size: 30px;
    color: #00ffff;
    text-shadow: 0 0 20px #00ffff;
    margin-left: 15px;
  }

  #message {
    font-size: 24px;
    color: #00ffff;
    text-shadow: 0 0 8px #00ffff;
    height: 40px;
    text-align: center;
    margin-top: 20px;
  }

  #combinations {
    font-size: 18px;
    color: #ff6600;
    text-shadow: 0 0 5px #ff6600;
    margin-top: 20px;
    text-align: center;
  }

  @@keyframes pulseGlow {
    0% {
      text-shadow: 0 0 20px #00ffff;
    }
    50% {
      text-shadow: 0 0 40px #00ffff, 0 0 60px #00ffff;
    }
    100% {
      text-shadow: 0 0 20px #00ffff;
    }
  }

  .fade-out {
    animation: fadeOutMsg 0.7s ease forwards;
  }
  @@keyframes fadeOutMsg {
    from { opacity: 1; }
    to { opacity: 0; }
  }
</style>

<div id="introScreen">
  <h1>Mercurio</h1>
  <p>Encuentra las combinaciones de tres n√∫meros que den como resultado el objetivo.</p>
  <button id="btnStart" class="boton-jugar">Comenzar</button>
</div>

<a href="/Home/Mapa" class="botonMapa">üó∫Ô∏è</a>
<button id="pistasBtn" onclick="mostrarPista()">Pistas</button>
<div id="pistaTexto" style="margin-left:14%; margin-bottom: 7%; margin-top: 5%;"></div>
<div id="gameContainer" style="display: none;">
    <div id="indicators">
        <div id="roundIndicator">Ronda: 1/3</div>
        <div id="progressIndicator">Secuencias: 0/2</div>
    </div>

    <div id="objective">Objetivo: <span>9</span></div>

    <div id="foundSequences">
        <h3>Secuencias Encontradas</h3>
        <ul class="sequence-list">
        </ul>
    </div>

    <!-- Pir√°mide 1 -->
    <div class="pyramid-container active" data-round="1">
        <div class="pyramid-row">
            <div class="cell" data-value="1" data-operator="+"><span class="letter">A</span>+1</div>
        </div>
        <div class="pyramid-row">
            <div class="cell" data-value="4" data-operator="/"><span class="letter">B</span>/4</div>
            <div class="cell" data-operator="*"><span class="letter">C</span>*3</div>
        </div>
        <div class="pyramid-row">
            <div class="cell" data-value="10" data-operator="-"><span class="letter">D</span>-10</div>
            <div class="cell" data-value="5" data-operator="/"><span class="letter">E</span>/5</div>
            <div class="cell" data-operator="*"><span class="letter">F</span>*6</div>
        </div>
        <div class="pyramid-row">
            <div class="cell" data-value="11" data-operator="-"><span class="letter">G</span>-11</div>
            <div class="cell" data-value="7" data-operator="+"><span class="letter">H</span>+7</div>
            <div class="cell" data-value="9" data-operator="/"><span class="letter">I</span>/9</div>
            <div class="cell" data-value="9" data-operator="+"><span class="letter">J</span>+9</div>
        </div>
    </div>

    <!-- Pir√°mide 2 -->
    <div class="pyramid-container" data-round="2">
        <div class="pyramid-row">
            <div class="cell" data-value="7" data-operator="*"><span class="letter">A</span>*7</div>
        </div>
        <div class="pyramid-row">
            <div class="cell" data-value="5" data-operator="/"><span class="letter">B</span>/5</div>
            <div class="cell" data-operator="+"><span class="letter">C</span>+9</div>
        </div>
        <div class="pyramid-row">
            <div class="cell" data-value="5" data-operator="-"><span class="letter">D</span>-5</div>
            <div class="cell" data-operator="*"><span class="letter">E</span>*2</div>
            <div class="cell" data-operator="+"><span class="letter">F</span>+2</div>
        </div>
        <div class="pyramid-row">
            <div class="cell" data-value="8" data-operator="/"><span class="letter">G</span>/8</div>
            <div class="cell" data-value="3" data-operator="/"><span class="letter">H</span>/3</div>
            <div class="cell" data-operator="-"><span class="letter">I</span>-8</div>
            <div class="cell" data-operator="*"><span class="letter">J</span>*3</div>
        </div>
    </div>

    <!-- Pir√°mide 3 -->
    <div class="pyramid-container" data-round="3">
        <div class="pyramid-row">
            <div class="cell" data-value="1" data-operator="-"><span class="letter">A</span>-1</div>
        </div>
        <div class="pyramid-row">
            <div class="cell" data-value="2" data-operator="+"><span class="letter">B</span>*2</div>
            <div class="cell" data-operator="+"><span class="letter">C</span>+3</div>
        </div>
        <div class="pyramid-row">
            <div class="cell" data-value="4" data-operator="-"><span class="letter">D</span>-4</div>
            <div class="cell" data-operator="*"><span class="letter">E</span>*5</div>
            <div class="cell" data-operator="*"><span class="letter">F</span>*6</div>
        </div>
        <div class="pyramid-row">
            <div class="cell" data-value="7" data-operator="*"><span class="letter">G</span>*7</div>
            <div class="cell" data-value="8" data-operator="-"><span class="letter">H</span>-8</div>
            <div class="cell" data-operator="*"><span class="letter">I</span>*9</div>
            <div class="cell" data-value="10" data-operator="-"><span class="letter">J</span>-10</div>
        </div>
    </div>

    <div id="message"></div>

    <div id="gameInfo">
        <h3>Reglas del Juego</h3>
        <ul>
            <li>Selecciona 3 n√∫meros que al operar den el objetivo</li>
            <li>Se elimina el primer operador de la secuencia</li>
            <li>Puedes reutilizar las letras en diferentes secuencias</li>
            <li>El N¬∞ final de la secuencia se calcula por t√©rminos, no por el orden en el que se seleccionan</li>
            <li>No se pueden repetir secuencias ya encontradas</li>
        </ul>
    </div>
</div>

<script>
  const introScreen = document.getElementById('introScreen');
  const btnStart = document.getElementById('btnStart');
  const gameContainer = document.getElementById('gameContainer');
  const messageEl = document.getElementById('message');
  const roundIndicator = document.getElementById('roundIndicator');
  const progressIndicator = document.getElementById('progressIndicator');
  const sequenceList = document.querySelector('.sequence-list');
  const pistasBtn = document.getElementById('pistasBtn');
  const pistaTexto = document.getElementById('pistaTexto');
  
  let currentRound = 1;
  let selectedCells = [];
  let solvedCombinations = new Set();
  let roundSequences = {
    1: [],
    2: [],
    3: []
  };
  let roundProgress = {
    1: 0,
    2: 0,
    3: 0
  };
  let pistaPaso = 0;
  
  const roundData = {
    1: {
      objective: 9,
      validCombinations: ['CAF', 'DEH', 'FAC', 'GDE']
    },
    2: {
      objective: 10,
      validCombinations: ['BJD', 'JHC', 'IGC', 'ACH', 'DBC', 'CFI', 'CEI']
    },
    3: {
      objective: 19,  
      validCombinations: ['CIH', 'DEA', 'DCE', 'ACF']
    }
  };

  function updateFoundSequences() {
    // Limpiar la lista actual
    sequenceList.innerHTML = '';
    
    // Mostrar las secuencias de la ronda actual
    roundSequences[currentRound].forEach(sequence => {
      const li = document.createElement('li');
      li.textContent = sequence;
      sequenceList.appendChild(li);
    });
  }

  function updateRoundDisplay() {
    roundIndicator.textContent = `Ronda: ${currentRound}/3`;
    progressIndicator.textContent = `Secuencias: ${roundProgress[currentRound]}/2`;
    
    // Actualizar el objetivo seg√∫n la ronda actual
    const objectiveSpan = document.querySelector('#objective span');
    objectiveSpan.textContent = roundData[currentRound].objective;
    
    document.querySelectorAll('.pyramid-container').forEach(pyramid => {
      pyramid.classList.remove('active');
      if (parseInt(pyramid.dataset.round) === currentRound) {
        pyramid.classList.add('active');
      }
    });
    updateFoundSequences(); // Actualizar la lista de secuencias al cambiar de ronda
  }

  function checkAndAdvanceRound() {
    if (roundProgress[currentRound] === 2 && currentRound < 3) {
      setTimeout(() => {
        currentRound++;
        updateRoundDisplay();
        messageEl.textContent = '¬°Ronda completada! Pasando al siguiente nivel...';
        messageEl.style.color = '#00ffff';
        messageEl.classList.remove('fade-out');
        setTimeout(() => {
          messageEl.classList.add('fade-out');
          setTimeout(() => {
            messageEl.textContent = '';
            messageEl.classList.remove('fade-out');
          }, 700);
        }, 1500);
      }, 0);
    } else if (roundProgress[currentRound] === 2 && currentRound === 3) {
      setTimeout(() => {
        messageEl.textContent = '¬°Felicitaciones! Has completado todos los niveles!';
        messageEl.style.color = '#00ffff';
        setTimeout(() => {
          window.location.href = '/Home/SpaceGame';
        }, 2000);
      }, 1500);
    }
  }

  function checkCombination() {
    const letters = selectedCells.map(cell => 
      cell.querySelector('.letter').textContent
    ).join('');

    const validCombinations = roundData[currentRound].validCombinations;
    
    if (validCombinations.includes(letters)) {
      if (solvedCombinations.has(letters)) {
        messageEl.textContent = '¬°Secuencia repetida!';
        messageEl.style.color = '#ff9900';
      } else {
        messageEl.textContent = '¬°Combinaci√≥n correcta!';
        messageEl.style.color = '#00ff00';
        solvedCombinations.add(letters);
        roundProgress[currentRound]++;
        roundSequences[currentRound].push(letters);
        updateRoundDisplay();
        checkAndAdvanceRound();
      }
    } else {
      messageEl.textContent = 'Combinaci√≥n incorrecta';
      messageEl.style.color = '#ff0000';
    }

    setTimeout(() => {
      selectedCells.forEach(cell => {
        cell.classList.remove('selected');
      });
      selectedCells = [];
      if (messageEl.textContent === 'Combinaci√≥n incorrecta' || messageEl.textContent === '¬°Secuencia repetida!') {
        messageEl.textContent = '';
      }
    }, 2000);
  }

  function mostrarPista() {
    const combinaciones = roundData[currentRound].validCombinations;
    // Filtrar las combinaciones ya usadas en la ronda actual
    const usadas = new Set(roundSequences[currentRound]);
    const disponibles = combinaciones.filter(c => !usadas.has(c));
    if (disponibles.length > 0) {
      const combinacion = disponibles[Math.floor(Math.random() * disponibles.length)];
      pistaTexto.textContent = `üí° Una combinaci√≥n posible: ${combinacion}`;
    } else {
      pistaTexto.textContent = "üìò Ya encontraste todas las combinaciones posibles.";
    }
    pistaTexto.style.display = "block";
    setTimeout(() => {
      pistaTexto.style.display = "none";
    }, 2000);
  }

  btnStart.addEventListener('click', () => {
    introScreen.style.display = 'none';
    gameContainer.style.display = 'flex';
    pistasBtn.style.display = 'inline-block';
    pistaTexto.style.display = 'none';
    pistaPaso = 0;
    updateRoundDisplay();
  });

  document.querySelectorAll('.cell').forEach(cell => {
    cell.addEventListener('click', () => {
      if (cell.classList.contains('selected')) {
        cell.classList.remove('selected');
        selectedCells = selectedCells.filter(c => c !== cell);
      } else if (selectedCells.length < 3) {
        cell.classList.add('selected');
        selectedCells.push(cell);
        
        if (selectedCells.length === 3) {
          checkCombination();
        }
      }
    });
  });

  updateRoundDisplay();

  // Permitir avanzar de ronda con la tecla 'V'
  document.addEventListener('keydown', function(event) {
    if (currentRound === 4) {
        messageEl.textContent = '¬°Felicitaciones! Has completado todos los niveles!';
        messageEl.style.color = '#00ffff';
        setTimeout(() => {
          window.location.href = '/Home/SpaceGame';
        }, 2000);
      }
  });
</script>
